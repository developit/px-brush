!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("px-brush",[],e):"object"==typeof exports?exports["px-brush"]=e():t["px-brush"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function r(a){if(e[a])return e[a].exports;var n=e[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,a){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(a,n,function(e){return t[e]}.bind(null,n));return a},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var a;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=((a=r(1))&&a.__esModule?a:{default:a}).default;e.default=n,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a,n=(a=r(2))&&a.__esModule?a:{default:a};function o(t,e){for(var r=0;r<e.length;r++){var a=e[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}var i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.context=e.getContext("2d"),this.stampMaker=new n.default,this.configPixelRatio()}var e,r,a;return e=t,(r=[{key:"configPixelRatio",value:function(){var t=this.canvas,e=t.width,r=t.height;this.canvas.width=e*this.dpr,this.canvas.height=r*this.dpr,this.canvas.style.width="".concat(e,"px"),this.canvas.style.height="".concat(r,"px"),this.context.scale(this.dpr,this.dpr),this.context.imageSmoothingEnabled=!1}},{key:"exportAsPNG",value:function(t){var e=this;return new Promise(function(r){var a=document.createElement("canvas"),n=a.getContext("2d"),o=e.canvas,i=o.width,u=o.height,s=i/e.dpr,c=u/e.dpr;a.width=s,a.height=c,n.imageSmoothingEnabled=!1,n.drawImage(e.canvas,0,0,i,u,0,0,s,c),a.toBlob(function(e){e.lastModifedDate=new Date,e.name=t,r(e)})})}},{key:"distanceBetween",value:function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}},{key:"angleBetween",value:function(t,e){return Math.atan2(e.x-t.x,e.y-t.y)}},{key:"draw",value:function(t){var e=t.from,r=t.to,a=t.size,n=t.color;this.context.globalCompositeOperation="source-over",this.brush({from:e,to:r,size:a,color:n})}},{key:"erase",value:function(t){var e=t.from,r=t.to,a=t.size;this.context.globalCompositeOperation="destination-out",this.brush({from:e,to:r,size:a,color:"#000000"})}},{key:"brush",value:function(t){var e=this,r=t.from,a=t.to,n=t.size,o=t.color,i=(n-n%2)/2,u=this.stampMaker.make({size:n,color:o});if(r.x!==a.x||r.y!==a.y)for(var s=this.distanceBetween(r,a),c=this.angleBetween(r,a),l=function(t){var a=r.x+Math.sin(c)*t-i,o=r.y+Math.cos(c)*t-i;window.requestAnimationFrame(function(){e.context.drawImage(u,Math.round(a),Math.round(o),n,n)})},f=0;f<s;f+=1)l(f);else{var d=r.x-i,h=r.y-i;this.context.drawImage(u,Math.round(d),Math.round(h),n,n)}}},{key:"dpr",get:function(){return window.devicePixelRatio||1}}])&&o(e.prototype,r),a&&o(e,a),t}();e.default=i,t.exports=e.default},function(t,e,r){"use strict";function a(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=[],a=!0,n=!1,o=void 0;try{for(var i,u=t[Symbol.iterator]();!(a=(i=u.next()).done)&&(r.push(i.value),!e||r.length!==e);a=!0);}catch(t){n=!0,o=t}finally{try{a||null==u.return||u.return()}finally{if(n)throw o}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function n(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t,e){for(var r=0;r<e.length;r++){var a=e[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=/^#?[0-9A-Fa-f]{1,2}[0-9A-Fa-f]{1,2}[0-9A-Fa-f]{1,2}$/,u=/^rgb\((\s+)?[0-9]{1,3},(\s+)?[0-9]{1,3},(\s+)?[0-9]{1,3}(\s+)?\)$/,s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvases={}}var e,r,s;return e=t,(r=[{key:"parseColor",value:function(t){var e=i.test(t),r=u.test(t);if(!e&&!r)throw new Error("Color is not correct format. #123123 or rgb(123, 123, 123) format required.");if(e){var o="#"===t[0]?t.slice(1):t;return o=3===o.length?o.split("").reduce(function(t,e){return[].concat(n(t),[e,e])},[]).join(""):o,{r:parseInt(o.slice(0,2),16),g:parseInt(o.slice(2,4),16),b:parseInt(o.slice(4,6),16)}}if(r){var s=a(t.replace(/rgb|\s+|\(|\)/g,"").split(",").map(function(t){return parseInt(t)}),3),c=s[0],l=s[1],f=s[2];return{r:c=c>255?255:c,g:l=l>255?255:l,b:f=f>255?255:f}}}},{key:"make",value:function(t){var e=t.size,r=t.color;try{e*=window.devicePixelRatio;var a=this.parseColor(r),n=JSON.stringify(a);if(this.canvases[n]=this.canvases[n]||{},null!=this.canvases[n][e])return this.canvases[n][e];var o=document.createElement("canvas");e+=e%2,o.width=e,o.height=e;for(var i=o.getContext("2d"),u=i.createImageData(e,e),s=0;s<u.data.length;s+=4)u.data[s]=255,u.data[s+1]=255,u.data[s+2]=255,u.data[s+3]=0;return this.plotCircle(2*e,4*e*(e/2),e/2,u,e,a),this.fillCircle(u,a),i.putImageData(u,0,0),this.canvases[n][e]=o,o}catch(t){console.error(t)}}},{key:"plotCircle",value:function(t,e,r,a,n,o){var i=-r,u=0,s=2-2*r;do{var c=t-4*(i+1)+(e+4*n*(u-1));a.data[c+0]=o.r,a.data[c+1]=o.g,a.data[c+2]=o.b,a.data[c+3]=255;var l=t-u*(4*n)+(e-4*(i+1));a.data[l+0]=o.r,a.data[l+1]=o.g,a.data[l+2]=o.b,a.data[l+3]=255;var f=t+4*i+(e-u*(4*n));a.data[f+0]=o.r,a.data[f+1]=o.g,a.data[f+2]=o.b,a.data[f+3]=255;var d=t+4*n*(u-1)+(e+4*i);a.data[d+0]=o.r,a.data[d+1]=o.g,a.data[d+2]=o.b,a.data[d+3]=255,(r=s)<=u&&(s+=2*++u+1),(r>i||s>u)&&(s+=2*++i+1)}while(i<0)}},{key:"fillCircle",value:function(t,e){for(var r=4*t.width,a=1;a<t.height-1;a+=1)for(var n=!1,o=!1,i=!1,u=0;u<r;u+=4){var s=r*a+u,c=t.data[s+3],l=255===c;l&&!n?n=!0:0===c&&n?o=!0:l&&n&&o&&(i=!0),n&&o&&!i&&(t.data[s]=e.r,t.data[s+1]=e.g,t.data[s+2]=e.b,t.data[s+3]=255)}}}])&&o(e.prototype,r),s&&o(e,s),t}();e.default=s,t.exports=e.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,