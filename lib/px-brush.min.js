!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("px-brush",[],e):"object"==typeof exports?exports["px-brush"]=e():t["px-brush"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,o=void 0;try{for(var i,c=t[Symbol.iterator]();!(n=(i=c.next()).done)&&(r.push(i.value),!e||r.length!==e);n=!0);}catch(t){a=!0,o=t}finally{try{n||null==c.return||c.return()}finally{if(a)throw o}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}r.r(e);var i=/^#?[0-9A-Fa-f]{1,2}[0-9A-Fa-f]{1,2}[0-9A-Fa-f]{1,2}$/,c=/^rgb\((\s+)?[0-9]{1,3},(\s+)?[0-9]{1,3},(\s+)?[0-9]{1,3}(\s+)?\)$/,s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvases={}}var e,r,s;return e=t,(r=[{key:"parseColor",value:function(t){var e=i.test(t),r=c.test(t);if(!e&&!r)throw new Error("Color is not correct format. #123123 or rgb(123, 123, 123) format required.");if(e){var o="#"===t[0]?t.slice(1):t;return o=3===o.length?o.split("").reduce((function(t,e){return[].concat(a(t),[e,e])}),[]).join(""):o,{r:parseInt(o.slice(0,2),16),g:parseInt(o.slice(2,4),16),b:parseInt(o.slice(4,6),16)}}if(r){var s=n(t.replace(/rgb|\s+|\(|\)/g,"").split(",").map((function(t){return parseInt(t)})),3),u=s[0],l=s[1],f=s[2];return{r:u=u>255?255:u,g:l=l>255?255:l,b:f=f>255?255:f}}}},{key:"make",value:function(t){var e=t.size,r=t.color;try{e*=window.devicePixelRatio;var n=this.parseColor(r),a=JSON.stringify(n);if(this.canvases[a]=this.canvases[a]||{},null!=this.canvases[a][e])return this.canvases[a][e];var o=document.createElement("canvas");e+=e%2,o.width=e,o.height=e;for(var i=o.getContext("2d"),c=i.createImageData(e,e),s=0;s<c.data.length;s+=4)c.data[s]=255,c.data[s+1]=255,c.data[s+2]=255,c.data[s+3]=0;return this.plotCircle(2*e,4*e*(e/2),e/2,c,e,n),this.fillCircle(c,n),i.putImageData(c,0,0),this.canvases[a][e]=o,o}catch(t){console.error(t)}}},{key:"plotCircle",value:function(t,e,r,n,a,o){var i=-r,c=0,s=2-2*r;do{var u=t-4*(i+1)+(e+4*a*(c-1));n.data[u+0]=o.r,n.data[u+1]=o.g,n.data[u+2]=o.b,n.data[u+3]=255;var l=t-c*(4*a)+(e-4*(i+1));n.data[l+0]=o.r,n.data[l+1]=o.g,n.data[l+2]=o.b,n.data[l+3]=255;var f=t+4*i+(e-c*(4*a));n.data[f+0]=o.r,n.data[f+1]=o.g,n.data[f+2]=o.b,n.data[f+3]=255;var d=t+4*a*(c-1)+(e+4*i);n.data[d+0]=o.r,n.data[d+1]=o.g,n.data[d+2]=o.b,n.data[d+3]=255,(r=s)<=c&&(s+=2*++c+1),(r>i||s>c)&&(s+=2*++i+1)}while(i<0)}},{key:"fillCircle",value:function(t,e){for(var r=4*t.width,n=1;n<t.height-1;n+=1)for(var a=!1,o=!1,i=!1,c=0;c<r;c+=4){var s=r*n+c,u=t.data[s+3],l=255===u;l&&!a?a=!0:0===u&&a?o=!0:l&&a&&o&&(i=!0),a&&o&&!i&&(t.data[s]=e.r,t.data[s+1]=e.g,t.data[s+2]=e.b,t.data[s+3]=255)}}}])&&o(e.prototype,r),s&&o(e,s),t}();function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var l=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.context=e.getContext("2d"),this.stampMaker=new s,this.configPixelRatio()}var e,r,n;return e=t,(r=[{key:"configPixelRatio",value:function(){var t=this.canvas,e=t.width,r=t.height;this.canvas.width=e*this.dpr,this.canvas.height=r*this.dpr,this.canvas.style.width="".concat(e,"px"),this.canvas.style.height="".concat(r,"px"),this.context.scale(this.dpr,this.dpr),this.context.imageSmoothingEnabled=!1}},{key:"exportAsPNG",value:function(t){var e=this;return new Promise((function(r){var n=document.createElement("canvas"),a=n.getContext("2d"),o=e.canvas,i=o.width,c=o.height,s=i/e.dpr,u=c/e.dpr;n.width=s,n.height=u,a.imageSmoothingEnabled=!1,a.drawImage(e.canvas,0,0,i,c,0,0,s,u),n.toBlob((function(e){e.lastModifedDate=new Date,e.name=t,r(e)}))}))}},{key:"distanceBetween",value:function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}},{key:"angleBetween",value:function(t,e){return Math.atan2(e.x-t.x,e.y-t.y)}},{key:"draw",value:function(t){var e=t.from,r=t.to,n=t.size,a=t.color;this.context.globalCompositeOperation="source-over",this.brush({from:e,to:r,size:n,color:a})}},{key:"erase",value:function(t){var e=t.from,r=t.to,n=t.size;this.context.globalCompositeOperation="destination-out",this.brush({from:e,to:r,size:n,color:"#000000"})}},{key:"brush",value:function(t){var e=this,r=t.from,n=t.to,a=t.size,o=t.color,i=(a-a%2)/2,c=this.stampMaker.make({size:a,color:o});if(r.x!==n.x||r.y!==n.y)for(var s=this.distanceBetween(r,n),u=this.angleBetween(r,n),l=function(t){var n=r.x+Math.sin(u)*t-i,o=r.y+Math.cos(u)*t-i;window.requestAnimationFrame((function(){e.context.drawImage(c,Math.round(n),Math.round(o),a,a)}))},f=0;f<s;f+=1)l(f);else{var d=r.x-i,h=r.y-i;this.context.drawImage(c,Math.round(d),Math.round(h),a,a)}}},{key:"dpr",get:function(){return window.devicePixelRatio||1}}])&&u(e.prototype,r),n&&u(e,n),t}();e.default=l}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,